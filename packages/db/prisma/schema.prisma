// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // You can change this to sqlite, mysql, etc.
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  bio       String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  provider  String?
  oauth_id  String?

  followers Follow[] @relation("followers")
  following Follow[] @relation("following")

  story Story[]
  likes Like[]

  // Optional: Add other related data like posts, etc.
  // posts      Post[]
}

model Follow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // The user who is following
  followerId Int
  follower   User @relation("following", fields: [followerId], references: [id], onDelete: Cascade)

  // The user who is being followed
  followingId Int
  following   User @relation("followers", fields: [followingId], references: [id], onDelete: Cascade)

  // Make sure a user can't follow another user multiple times
  @@unique([followerId, followingId])
  // Index to improve query performance
  @@index([followerId])
  @@index([followingId])
}

model Story {
  id        String   @id @default(cuid())
  title     String
  content   String
  imageUrl  String?
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  isUpdated Boolean
  tag       tags[]
  likes     Like[]
}

model tags {
  id      String  @id @default(cuid())
  tagName String
  stories Story[]
}

model Like {
  id        String   @id @default(cuid())
  userId    Int
  storyId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, storyId])
}
